" Trailing whitespace highlighting
set list
set listchars=tab:\ \ ,trail:.

set tabstop=2
set shiftwidth=2
set number

if exists('&inccommand')
  set inccommand=split
endif

if has('nvim')
  :tnoremap <Esc> <C-\><C-n>
  :vnoremap <C-c> "*y
endif

set runtimepath^=~/.vim/bundle/ctrlp.vim
set hlsearch
map tn :tabnew <cr>
map th :tabprev <cr>
map tl :tabnext <cr>
imap jj <Esc>
autocmd Filetype lua set shiftwidth=2 softtabstop=2 expandtab
autocmd Filetype riot set shiftwidth=2 softtabstop=2 expandtab
autocmd Filetype typescript set shiftwidth=2 softtabstop=2 expandtab
autocmd Filetype liquid set shiftwidth=2 softtabstop=2 expandtab

autocmd BufEnter */*.rb let g:turbux_command_rspec  = 'bundle exec rspec'
autocmd BufEnter */bigcartel/*.rb let g:turbux_command_rspec  = 'bundle exec spec'
autocmd BufEnter */hub/*.rb let g:turbux_command_rspec  = 'bundle exec spec'

command! -nargs=0 -bar Qargs execute 'args ' . QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(values(buffer_numbers))
endfunction

let g:ale_linters = {'go': ['golangserver', 'gofmt', 'gobuild']}

set background=dark
colorscheme atom-dark-256

" Stop CtrlP from looking in useless directories
set wildignore+=*/.git/*,*/vendor,*/node_modules,*/bower_components,*/tmp

function! TestToSpec()
  %s/test_helper/rails_helper/e
  %s/mock(\(.*\))\.\(\w*[!?]\?\)(\(.*\)) {\(.*\)/expect(\1).to receive(:\2).with(\3) {\4/e
  %s/stub(\(.*\))\.\(\w*[!?]\?\)(\(.*\)) {\(.*\)/allow(\1).to receive(:\2).with(\3) {\4/e

  %s/mock(\(.*\))\.\(\w*[!?]\?\)(\(.*\))/expect(\1).to receive(:\2).with(\3)/e
  %s/stub(\(.*\))\.\(\w*[!?]\?\)(\(.*\))/allow(\1).to receive(:\2).with(\3)/e

  %s/mock(\(.*\))\.\(\w*[!?]\?\) {\(.*\)/expect(\1).to receive(:\2) {\3/e
  %s/stub(\(.*\))\.\(\w*[!?]\?\) {\(.*\)/allow(\1).to receive(:\2) {\3/e

  %s/mock(\(.*\))\.\(\w*[!?]\?\)/expect(\1).to receive(:\2)/e
  %s/stub(\(.*\))\.\(\w*[!?]\?\)/allow(\1).to receive(:\2)/e

  %s/dont_allow(\(.*\))\.\(\w*[!?]\?\)/expect(\1).not_to receive(:\2)/e

  %s/\(expect\|allow\)\(.*\)\.any_times/\1\2\.at_least(:once)/e
  %s/\(expect\|allow\)\(.*\)\.with_any_args/\1\2\.with(anything)/e

  %s/\( *\)\(.*\).must_equal[ (]\([^)]*\))\?/\1expect(\2).to eql(\3)/e
  %s/\( *\)\(.*\).must_be[ (]:\([^)]*\), \([^)]*\))\?/\1expect(\2).to be \3 \4/e
  %s/\( *\)\(.*\).must_be_kind_of[ (]\([^)]*\))\?/\1expect(\2).to be_kind_of(\3)/e
  %s/\( *\)\(.*\).must_be_nil/\1expect(\2).to eql(nil)/e
  %s/\( *\)\(.*\).wont_be_nil/\1expect(\2).to be_present/e
  %s/\( *\)\(.*\).must_include[ (]\([^)]*\))\?/\1expect(\2).to include(\3)/e
  %s/\( *\)\(.*\).must_match[ (]\([^)]*\))\?/\1expect(\2).to match(\3)/e
  %s/\( *\)\(.*\).wont_match[ (]\([^)]*\))\?/\1expect(\2).not_to match(\3)/e
  %s/\( *\)\(.*\).wont_include[ (]\([^)]*\))\?/\1expect(\2).not_to include(\3)/e
  %s/assert[ (]\(.*\))\?/expect(\1).to be_truthy/e
  %s/assert_redirected_to[ (]\(.*\))\?/expect(response).to redirect_to(\1)/e
  %s/assert_template[ (]\(.*\))\?/expect(response).to render_template(\1)/e
  %s/assert_response[ (]\(.*\))\?/expect(response).to have_http_status(\1)/e
  %s/assert_equal[ (]\(.*\), \(.*\))\?/expect(\1).to eql(\2)/e
  %s/assert_match[ (]\(.*\), \(.*\))\?/expect(\2).to match(\1)/e
  %s/must_render_template[ (]\(.*\))\?/expect(response).to render_template(\1)/e
  %s/\( *\)\(.*\).wont_be[ (]:\(.*\)?)\?/\1expect(\2).not_to be_\3/e
  %s/\( *\)\(.*\).must_be[ (]:\(.*\)?)\?/\1expect(\2).to be_\3/e
endfunction

command! -nargs=0 Test2Spec call TestToSpec()

" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient [LC]
let g:go_def_mapping_enabled = 0

" Conquer Of Completion (coc) plugin config
let g:coc_disable_startup_warning = 1

function! ShowDocIfNoDiagnostic(timer_id)
  if (coc#util#has_float() == 0)
    silent call CocActionAsync('doHover')
  endif
endfunction

function! s:show_hover_doc()
  call timer_start(500, 'ShowDocIfNoDiagnostic')
endfunction

autocmd CursorHoldI * :call <SID>show_hover_doc()
autocmd CursorHold * :call <SID>show_hover_doc()

" Conquer Of Completion (coc) keyboard commands for nvim
nnoremap <silent> K :call CocAction('doHover')<CR>
nmap <leader>do <Plug>(coc-codeaction)
nmap <leader>rn <Plug>(coc-rename)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gr <Plug>(coc-references)
